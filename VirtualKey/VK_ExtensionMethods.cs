using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Straitjacket
{
    internal static class VK_ExtensionMethods
    {
        // US Standard layout
        private static readonly Dictionary<VK, KeyCode> VKToKeyCode = new Dictionary<VK, KeyCode>()
        {
            [VK.VK_0] = KeyCode.Alpha0,
            [VK.VK_1] = KeyCode.Alpha1,
            [VK.VK_2] = KeyCode.Alpha2,
            [VK.VK_3] = KeyCode.Alpha3,
            [VK.VK_4] = KeyCode.Alpha4,
            [VK.VK_5] = KeyCode.Alpha5,
            [VK.VK_6] = KeyCode.Alpha6,
            [VK.VK_7] = KeyCode.Alpha7,
            [VK.VK_8] = KeyCode.Alpha8,
            [VK.VK_9] = KeyCode.Alpha9,
            [VK.VK_A] = KeyCode.A,
            [VK.VK_B] = KeyCode.B,
            [VK.VK_C] = KeyCode.C,
            [VK.VK_D] = KeyCode.D,
            [VK.VK_E] = KeyCode.E,
            [VK.VK_F] = KeyCode.F,
            [VK.VK_G] = KeyCode.G,
            [VK.VK_H] = KeyCode.H,
            [VK.VK_I] = KeyCode.I,
            [VK.VK_J] = KeyCode.J,
            [VK.VK_K] = KeyCode.K,
            [VK.VK_L] = KeyCode.L,
            [VK.VK_M] = KeyCode.M,
            [VK.VK_N] = KeyCode.N,
            [VK.VK_O] = KeyCode.O,
            [VK.VK_P] = KeyCode.P,
            [VK.VK_Q] = KeyCode.Q,
            [VK.VK_R] = KeyCode.R,
            [VK.VK_S] = KeyCode.S,
            [VK.VK_T] = KeyCode.T,
            [VK.VK_U] = KeyCode.U,
            [VK.VK_V] = KeyCode.V,
            [VK.VK_W] = KeyCode.W,
            [VK.VK_X] = KeyCode.X,
            [VK.VK_Y] = KeyCode.Y,
            [VK.VK_Z] = KeyCode.Z,
            [VK.VK_F1] = KeyCode.F1,
            [VK.VK_F2] = KeyCode.F2,
            [VK.VK_F3] = KeyCode.F3,
            [VK.VK_F4] = KeyCode.F4,
            [VK.VK_F5] = KeyCode.F5,
            [VK.VK_F6] = KeyCode.F6,
            [VK.VK_F7] = KeyCode.F7,
            [VK.VK_F8] = KeyCode.F8,
            [VK.VK_F9] = KeyCode.F9,
            [VK.VK_F10] = KeyCode.F10,
            [VK.VK_F11] = KeyCode.F11,
            [VK.VK_F12] = KeyCode.F12,
            [VK.VK_F13] = KeyCode.F13,
            [VK.VK_F14] = KeyCode.F14,
            [VK.VK_F15] = KeyCode.F15,
            [VK.VK_NUMPAD0] = KeyCode.Keypad0,
            [VK.VK_NUMPAD1] = KeyCode.Keypad1,
            [VK.VK_NUMPAD2] = KeyCode.Keypad2,
            [VK.VK_NUMPAD3] = KeyCode.Keypad3,
            [VK.VK_NUMPAD4] = KeyCode.Keypad4,
            [VK.VK_NUMPAD5] = KeyCode.Keypad5,
            [VK.VK_NUMPAD6] = KeyCode.Keypad6,
            [VK.VK_NUMPAD7] = KeyCode.Keypad7,
            [VK.VK_NUMPAD8] = KeyCode.Keypad8,
            [VK.VK_NUMPAD9] = KeyCode.Keypad9,
            [VK.VK_DIVIDE] = KeyCode.KeypadDivide,
            [VK.VK_RETURN] = KeyCode.Return,
            [VK.VK_SUBTRACT] = KeyCode.KeypadMinus,
            [VK.VK_MULTIPLY] = KeyCode.KeypadMultiply,
            [VK.VK_DECIMAL] = KeyCode.KeypadPeriod,
            [VK.VK_ADD] = KeyCode.KeypadPlus,
            [VK.VK_LBUTTON] = KeyCode.Mouse0,
            [VK.VK_RBUTTON] = KeyCode.Mouse1,
            [VK.VK_MBUTTON] = KeyCode.Mouse2,
            [VK.VK_BACK] = KeyCode.Backspace,
            [VK.VK_CANCEL] = KeyCode.Break,
            [VK.VK_CAPITAL] = KeyCode.CapsLock,
            [VK.VK_CLEAR] = KeyCode.Clear,
            [VK.VK_CONTROL] = KeyCode.LeftControl,
            [VK.VK_DELETE] = KeyCode.Delete,
            [VK.VK_DOWN] = KeyCode.DownArrow,
            [VK.VK_END] = KeyCode.End,
            [VK.VK_ESCAPE] = KeyCode.Escape,
            [VK.VK_HELP] = KeyCode.Help,
            [VK.VK_HOME] = KeyCode.Home,
            [VK.VK_INSERT] = KeyCode.Insert,
            [VK.VK_LCONTROL] = KeyCode.LeftControl,
            [VK.VK_LEFT] = KeyCode.LeftArrow,
            [VK.VK_LMENU] = KeyCode.LeftAlt,
            [VK.VK_LSHIFT] = KeyCode.LeftShift,
            [VK.VK_LWIN] = KeyCode.LeftWindows,
            [VK.VK_MENU] = KeyCode.Menu,
            [VK.VK_NEXT] = KeyCode.PageDown,
            [VK.VK_OEM_1] = KeyCode.Colon,
            [VK.VK_OEM_2] = KeyCode.Slash,
            [VK.VK_OEM_3] = KeyCode.BackQuote,
            [VK.VK_OEM_4] = KeyCode.LeftBracket,
            [VK.VK_OEM_5] = KeyCode.Backslash,
            [VK.VK_OEM_6] = KeyCode.RightBracket,
            [VK.VK_OEM_7] = KeyCode.Quote,
            [VK.VK_OEM_CLEAR] = KeyCode.Clear,
            [VK.VK_OEM_COMMA] = KeyCode.Comma,
            [VK.VK_OEM_MINUS] = KeyCode.Minus,
            [VK.VK_OEM_PERIOD] = KeyCode.Period,
            [VK.VK_OEM_PLUS] = KeyCode.Equals,
            [VK.VK_PAUSE] = KeyCode.Pause,
            [VK.VK_PRINT] = KeyCode.Print,
            [VK.VK_PRIOR] = KeyCode.PageUp,
            [VK.VK_RCONTROL] = KeyCode.RightControl,
            [VK.VK_RIGHT] = KeyCode.RightArrow,
            [VK.VK_RMENU] = KeyCode.RightAlt,
            [VK.VK_RSHIFT] = KeyCode.RightShift,
            [VK.VK_RWIN] = KeyCode.RightWindows,
            [VK.VK_SCROLL] = KeyCode.ScrollLock,
            [VK.VK_SHIFT] = KeyCode.LeftShift,
            [VK.VK_SPACE] = KeyCode.Space,
            [VK.VK_TAB] = KeyCode.Tab,
            [VK.VK_UP] = KeyCode.UpArrow
        };

        // US Standard layout
        private static readonly Dictionary<KeyCode, VK> KeyCodeToVK = new Dictionary<KeyCode, VK>()
        {
            [KeyCode.Alpha0] = VK.VK_0,
            [KeyCode.Alpha1] = VK.VK_1,
            [KeyCode.Alpha2] = VK.VK_2,
            [KeyCode.Alpha3] = VK.VK_3,
            [KeyCode.Alpha4] = VK.VK_4,
            [KeyCode.Alpha5] = VK.VK_5,
            [KeyCode.Alpha6] = VK.VK_6,
            [KeyCode.Alpha7] = VK.VK_7,
            [KeyCode.Alpha8] = VK.VK_8,
            [KeyCode.Alpha9] = VK.VK_9,
            [KeyCode.A] = VK.VK_A,
            [KeyCode.B] = VK.VK_B,
            [KeyCode.C] = VK.VK_C,
            [KeyCode.D] = VK.VK_D,
            [KeyCode.E] = VK.VK_E,
            [KeyCode.F] = VK.VK_F,
            [KeyCode.G] = VK.VK_G,
            [KeyCode.H] = VK.VK_H,
            [KeyCode.I] = VK.VK_I,
            [KeyCode.J] = VK.VK_J,
            [KeyCode.K] = VK.VK_K,
            [KeyCode.L] = VK.VK_L,
            [KeyCode.M] = VK.VK_M,
            [KeyCode.N] = VK.VK_N,
            [KeyCode.O] = VK.VK_O,
            [KeyCode.P] = VK.VK_P,
            [KeyCode.Q] = VK.VK_Q,
            [KeyCode.R] = VK.VK_R,
            [KeyCode.S] = VK.VK_S,
            [KeyCode.T] = VK.VK_T,
            [KeyCode.U] = VK.VK_U,
            [KeyCode.V] = VK.VK_V,
            [KeyCode.W] = VK.VK_W,
            [KeyCode.X] = VK.VK_X,
            [KeyCode.Y] = VK.VK_Y,
            [KeyCode.Z] = VK.VK_Z,
            [KeyCode.F1] = VK.VK_F1,
            [KeyCode.F2] = VK.VK_F2,
            [KeyCode.F3] = VK.VK_F3,
            [KeyCode.F4] = VK.VK_F4,
            [KeyCode.F5] = VK.VK_F5,
            [KeyCode.F6] = VK.VK_F6,
            [KeyCode.F7] = VK.VK_F7,
            [KeyCode.F8] = VK.VK_F8,
            [KeyCode.F9] = VK.VK_F9,
            [KeyCode.F10] = VK.VK_F10,
            [KeyCode.F11] = VK.VK_F11,
            [KeyCode.F12] = VK.VK_F12,
            [KeyCode.F13] = VK.VK_F13,
            [KeyCode.F14] = VK.VK_F14,
            [KeyCode.F15] = VK.VK_F15,
            [KeyCode.Keypad0] = VK.VK_NUMPAD0,
            [KeyCode.Keypad1] = VK.VK_NUMPAD1,
            [KeyCode.Keypad2] = VK.VK_NUMPAD2,
            [KeyCode.Keypad3] = VK.VK_NUMPAD3,
            [KeyCode.Keypad4] = VK.VK_NUMPAD4,
            [KeyCode.Keypad5] = VK.VK_NUMPAD5,
            [KeyCode.Keypad6] = VK.VK_NUMPAD6,
            [KeyCode.Keypad7] = VK.VK_NUMPAD7,
            [KeyCode.Keypad8] = VK.VK_NUMPAD8,
            [KeyCode.Keypad9] = VK.VK_NUMPAD9,
            [KeyCode.KeypadDivide] = VK.VK_DIVIDE,
            [KeyCode.KeypadEnter] = VK.VK_RETURN,
            [KeyCode.KeypadMinus] = VK.VK_SUBTRACT,
            [KeyCode.KeypadMultiply] = VK.VK_MULTIPLY,
            [KeyCode.KeypadPeriod] = VK.VK_DECIMAL,
            [KeyCode.KeypadPlus] = VK.VK_ADD,
            [KeyCode.Mouse0] = VK.VK_LBUTTON,
            [KeyCode.Mouse1] = VK.VK_RBUTTON,
            [KeyCode.Mouse2] = VK.VK_MBUTTON,
            [KeyCode.AltGr] = VK.VK_RMENU,
            [KeyCode.Ampersand] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_7,
            [KeyCode.Asterisk] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_8,
            [KeyCode.At] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_2,
            [KeyCode.BackQuote] = VK.VK_OEM_3,
            [KeyCode.Backslash] = VK.VK_OEM_5,
            [KeyCode.Backspace] = VK.VK_BACK,
            [KeyCode.Break] = VK.VK_CANCEL, // Ctrl+break
            [KeyCode.CapsLock] = VK.VK_CAPITAL,
            [KeyCode.Caret] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_6,
            [KeyCode.Clear] = VK.VK_CLEAR | VK.VK_OEM_CLEAR,
            [KeyCode.Colon] = VK.VK_OEM_1,
            [KeyCode.Comma] = VK.VK_OEM_COMMA,
            [KeyCode.Delete] = VK.VK_DELETE,
            [KeyCode.Dollar] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_4,
            [KeyCode.DoubleQuote] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_7,
            [KeyCode.DownArrow] = VK.VK_DOWN,
            [KeyCode.End] = VK.VK_END,
            [KeyCode.Equals] = VK.VK_OEM_PLUS,
            [KeyCode.Escape] = VK.VK_ESCAPE,
            [KeyCode.Exclaim] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_1,
            [KeyCode.Greater] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_PERIOD,
            [KeyCode.Hash] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_3,
            [KeyCode.Help] = VK.VK_HELP,
            [KeyCode.Home] = VK.VK_HOME,
            [KeyCode.Insert] = VK.VK_INSERT,
            [KeyCode.LeftAlt] = VK.VK_LMENU,
            [KeyCode.LeftApple] = VK.VK_LCONTROL,
            [KeyCode.LeftArrow] = VK.VK_LEFT,
            [KeyCode.LeftBracket] = VK.VK_OEM_4,
            [KeyCode.LeftCommand] = VK.VK_LCONTROL,
            [KeyCode.LeftCurlyBracket] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_4,
            [KeyCode.LeftParen] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_9,
            [KeyCode.LeftShift] = VK.VK_LSHIFT,
            [KeyCode.LeftWindows] = VK.VK_LWIN,
            [KeyCode.Less] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_COMMA,
            [KeyCode.Menu] = VK.VK_MENU,
            [KeyCode.Minus] = VK.VK_OEM_MINUS,
            [KeyCode.None] = 0,
            [KeyCode.Numlock] = VK.VK_NUMLOCK,
            [KeyCode.PageDown] = VK.VK_NEXT,
            [KeyCode.PageUp] = VK.VK_PRIOR,
            [KeyCode.Pause] = VK.VK_PAUSE,
            [KeyCode.Percent] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_5,
            [KeyCode.Period] = VK.VK_OEM_PERIOD,
            [KeyCode.Pipe] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_5,
            [KeyCode.Plus] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_PLUS,
            [KeyCode.Print] = VK.VK_PRINT,
            [KeyCode.Question] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_2,
            [KeyCode.Quote] = VK.VK_OEM_7,
            [KeyCode.Return] = VK.VK_RETURN,
            [KeyCode.RightAlt] = VK.VK_RMENU,
            [KeyCode.RightApple] = VK.VK_RCONTROL,
            [KeyCode.RightArrow] = VK.VK_RIGHT,
            [KeyCode.RightBracket] = VK.VK_OEM_6,
            [KeyCode.RightCommand] = VK.VK_RCONTROL,
            [KeyCode.RightControl] = VK.VK_RCONTROL,
            [KeyCode.RightCurlyBracket] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_6,
            [KeyCode.RightParen] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_0,
            [KeyCode.RightShift] = VK.VK_RSHIFT,
            [KeyCode.RightWindows] = VK.VK_RWIN,
            [KeyCode.ScrollLock] = VK.VK_SCROLL,
            [KeyCode.Semicolon] = VK.VK_OEM_1,
            [KeyCode.Slash] = VK.VK_OEM_2,
            [KeyCode.Space] = VK.VK_SPACE,
            [KeyCode.SysReq] = VK.VK_PRINT,
            [KeyCode.Tab] = VK.VK_TAB,
            [KeyCode.Tilde] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_3,
            [KeyCode.Underscore] = (VK.VK_LSHIFT | VK.VK_RSHIFT) & VK.VK_OEM_MINUS,
            [KeyCode.UpArrow] = VK.VK_UP
        };

        public static KeyCode ToKeyCode(this VK vk)
        {
            if (VKToKeyCode.ContainsKey(vk))
            {
                return VKToKeyCode[vk];
            }
            else if (KeyCodeToVK.ContainsValue(vk))
            {
                return KeyCodeToVK.First(x => x.Value == vk).Key;
            }
            else
            {
                return KeyCode.None;
            }
        }

        public static VK ToVK(this KeyCode keyCode)
        {
            if (KeyCodeToVK.ContainsKey(keyCode))
            {
                return KeyCodeToVK[keyCode];
            }
            else if (VKToKeyCode.ContainsValue(keyCode))
            {
                return VKToKeyCode.First(x => x.Value == keyCode).Key;
            }
            else
            {
                return 0;
            }
        }
    }
}
